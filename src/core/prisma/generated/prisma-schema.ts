// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateAuth {
  count: Int!
}

type AggregateBank {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Auth {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime
  email: String!
  type: Role!
  phoneNumber: String!
  pin: String!
}

type AuthConnection {
  pageInfo: PageInfo!
  edges: [AuthEdge]!
  aggregate: AggregateAuth!
}

input AuthCreateInput {
  id: ID
  user: UserCreateOneInput!
  email: String!
  type: RoleCreateOneInput!
  phoneNumber: String!
  pin: String!
}

type AuthEdge {
  node: Auth!
  cursor: String!
}

enum AuthOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  pin_ASC
  pin_DESC
}

type AuthPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  email: String!
  phoneNumber: String!
  pin: String!
}

type AuthSubscriptionPayload {
  mutation: MutationType!
  node: Auth
  updatedFields: [String!]
  previousValues: AuthPreviousValues
}

input AuthSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthWhereInput
  AND: [AuthSubscriptionWhereInput!]
  OR: [AuthSubscriptionWhereInput!]
  NOT: [AuthSubscriptionWhereInput!]
}

input AuthUpdateInput {
  user: UserUpdateOneRequiredInput
  email: String
  type: RoleUpdateOneRequiredInput
  phoneNumber: String
  pin: String
}

input AuthUpdateManyMutationInput {
  email: String
  phoneNumber: String
  pin: String
}

input AuthWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  type: RoleWhereInput
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  pin: String
  pin_not: String
  pin_in: [String!]
  pin_not_in: [String!]
  pin_lt: String
  pin_lte: String
  pin_gt: String
  pin_gte: String
  pin_contains: String
  pin_not_contains: String
  pin_starts_with: String
  pin_not_starts_with: String
  pin_ends_with: String
  pin_not_ends_with: String
  AND: [AuthWhereInput!]
  OR: [AuthWhereInput!]
  NOT: [AuthWhereInput!]
}

input AuthWhereUniqueInput {
  id: ID
}

type Bank {
  id: ID!
  bankName: String!
  accountName: String!
  bankCode: String!
  accountNumber: String!
}

type BankConnection {
  pageInfo: PageInfo!
  edges: [BankEdge]!
  aggregate: AggregateBank!
}

input BankCreateInput {
  id: ID
  bankName: String!
  accountName: String!
  bankCode: String!
  accountNumber: String!
}

input BankCreateOneInput {
  create: BankCreateInput
  connect: BankWhereUniqueInput
}

type BankEdge {
  node: Bank!
  cursor: String!
}

enum BankOrderByInput {
  id_ASC
  id_DESC
  bankName_ASC
  bankName_DESC
  accountName_ASC
  accountName_DESC
  bankCode_ASC
  bankCode_DESC
  accountNumber_ASC
  accountNumber_DESC
}

type BankPreviousValues {
  id: ID!
  bankName: String!
  accountName: String!
  bankCode: String!
  accountNumber: String!
}

type BankSubscriptionPayload {
  mutation: MutationType!
  node: Bank
  updatedFields: [String!]
  previousValues: BankPreviousValues
}

input BankSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BankWhereInput
  AND: [BankSubscriptionWhereInput!]
  OR: [BankSubscriptionWhereInput!]
  NOT: [BankSubscriptionWhereInput!]
}

input BankUpdateDataInput {
  bankName: String
  accountName: String
  bankCode: String
  accountNumber: String
}

input BankUpdateInput {
  bankName: String
  accountName: String
  bankCode: String
  accountNumber: String
}

input BankUpdateManyMutationInput {
  bankName: String
  accountName: String
  bankCode: String
  accountNumber: String
}

input BankUpdateOneRequiredInput {
  create: BankCreateInput
  update: BankUpdateDataInput
  upsert: BankUpsertNestedInput
  connect: BankWhereUniqueInput
}

input BankUpsertNestedInput {
  update: BankUpdateDataInput!
  create: BankCreateInput!
}

input BankWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  bankName: String
  bankName_not: String
  bankName_in: [String!]
  bankName_not_in: [String!]
  bankName_lt: String
  bankName_lte: String
  bankName_gt: String
  bankName_gte: String
  bankName_contains: String
  bankName_not_contains: String
  bankName_starts_with: String
  bankName_not_starts_with: String
  bankName_ends_with: String
  bankName_not_ends_with: String
  accountName: String
  accountName_not: String
  accountName_in: [String!]
  accountName_not_in: [String!]
  accountName_lt: String
  accountName_lte: String
  accountName_gt: String
  accountName_gte: String
  accountName_contains: String
  accountName_not_contains: String
  accountName_starts_with: String
  accountName_not_starts_with: String
  accountName_ends_with: String
  accountName_not_ends_with: String
  bankCode: String
  bankCode_not: String
  bankCode_in: [String!]
  bankCode_not_in: [String!]
  bankCode_lt: String
  bankCode_lte: String
  bankCode_gt: String
  bankCode_gte: String
  bankCode_contains: String
  bankCode_not_contains: String
  bankCode_starts_with: String
  bankCode_not_starts_with: String
  bankCode_ends_with: String
  bankCode_not_ends_with: String
  accountNumber: String
  accountNumber_not: String
  accountNumber_in: [String!]
  accountNumber_not_in: [String!]
  accountNumber_lt: String
  accountNumber_lte: String
  accountNumber_gt: String
  accountNumber_gte: String
  accountNumber_contains: String
  accountNumber_not_contains: String
  accountNumber_starts_with: String
  accountNumber_not_starts_with: String
  accountNumber_ends_with: String
  accountNumber_not_ends_with: String
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
}

input BankWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAuth(data: AuthCreateInput!): Auth!
  updateAuth(data: AuthUpdateInput!, where: AuthWhereUniqueInput!): Auth
  updateManyAuths(data: AuthUpdateManyMutationInput!, where: AuthWhereInput): BatchPayload!
  upsertAuth(where: AuthWhereUniqueInput!, create: AuthCreateInput!, update: AuthUpdateInput!): Auth!
  deleteAuth(where: AuthWhereUniqueInput!): Auth
  deleteManyAuths(where: AuthWhereInput): BatchPayload!
  createBank(data: BankCreateInput!): Bank!
  updateBank(data: BankUpdateInput!, where: BankWhereUniqueInput!): Bank
  updateManyBanks(data: BankUpdateManyMutationInput!, where: BankWhereInput): BatchPayload!
  upsertBank(where: BankWhereUniqueInput!, create: BankCreateInput!, update: BankUpdateInput!): Bank!
  deleteBank(where: BankWhereUniqueInput!): Bank
  deleteManyBanks(where: BankWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  auth(where: AuthWhereUniqueInput!): Auth
  auths(where: AuthWhereInput, orderBy: AuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Auth]!
  authsConnection(where: AuthWhereInput, orderBy: AuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthConnection!
  bank(where: BankWhereUniqueInput!): Bank
  banks(where: BankWhereInput, orderBy: BankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bank]!
  banksConnection(where: BankWhereInput, orderBy: BankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BankConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Role {
  id: ID!
  name: String!
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: ID
  name: String!
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  name: String
}

input RoleUpdateInput {
  name: String
}

input RoleUpdateManyMutationInput {
  name: String
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  auth(where: AuthSubscriptionWhereInput): AuthSubscriptionPayload
  bank(where: BankSubscriptionWhereInput): BankSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  type: Role!
  email: String!
  phoneNumber: String!
  dob: String!
  bank: Bank!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  type: RoleCreateOneInput!
  email: String!
  phoneNumber: String!
  dob: String!
  bank: BankCreateOneInput!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  dob_ASC
  dob_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  dob: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  type: RoleUpdateOneRequiredInput
  email: String
  phoneNumber: String
  dob: String
  bank: BankUpdateOneRequiredInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  type: RoleUpdateOneRequiredInput
  email: String
  phoneNumber: String
  dob: String
  bank: BankUpdateOneRequiredInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  dob: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  type: RoleWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  dob: String
  dob_not: String
  dob_in: [String!]
  dob_not_in: [String!]
  dob_lt: String
  dob_lte: String
  dob_gt: String
  dob_gte: String
  dob_contains: String
  dob_not_contains: String
  dob_starts_with: String
  dob_not_starts_with: String
  dob_ends_with: String
  dob_not_ends_with: String
  bank: BankWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`