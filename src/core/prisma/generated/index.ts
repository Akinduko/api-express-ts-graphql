// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  auth: (where?: AuthWhereInput) => Promise<boolean>;
  bank: (where?: BankWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  organizationType: (where?: OrganizationTypeWhereInput) => Promise<boolean>;
  otp: (where?: OtpWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userOrganizationRole: (
    where?: UserOrganizationRoleWhereInput
  ) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  auth: (where: AuthWhereUniqueInput) => AuthNullablePromise;
  auths: (args?: {
    where?: AuthWhereInput;
    orderBy?: AuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Auth>;
  authsConnection: (args?: {
    where?: AuthWhereInput;
    orderBy?: AuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthConnectionPromise;
  bank: (where: BankWhereUniqueInput) => BankNullablePromise;
  banks: (args?: {
    where?: BankWhereInput;
    orderBy?: BankOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bank>;
  banksConnection: (args?: {
    where?: BankWhereInput;
    orderBy?: BankOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BankConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  organizationType: (
    where: OrganizationTypeWhereUniqueInput
  ) => OrganizationTypeNullablePromise;
  organizationTypes: (args?: {
    where?: OrganizationTypeWhereInput;
    orderBy?: OrganizationTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrganizationType>;
  organizationTypesConnection: (args?: {
    where?: OrganizationTypeWhereInput;
    orderBy?: OrganizationTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationTypeConnectionPromise;
  otp: (where: OtpWhereUniqueInput) => OtpNullablePromise;
  otps: (args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Otp>;
  otpsConnection: (args?: {
    where?: OtpWhereInput;
    orderBy?: OtpOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OtpConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userOrganizationRole: (
    where: UserOrganizationRoleWhereUniqueInput
  ) => UserOrganizationRoleNullablePromise;
  userOrganizationRoles: (args?: {
    where?: UserOrganizationRoleWhereInput;
    orderBy?: UserOrganizationRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserOrganizationRole>;
  userOrganizationRolesConnection: (args?: {
    where?: UserOrganizationRoleWhereInput;
    orderBy?: UserOrganizationRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserOrganizationRoleConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuth: (data: AuthCreateInput) => AuthPromise;
  updateAuth: (args: {
    data: AuthUpdateInput;
    where: AuthWhereUniqueInput;
  }) => AuthPromise;
  updateManyAuths: (args: {
    data: AuthUpdateManyMutationInput;
    where?: AuthWhereInput;
  }) => BatchPayloadPromise;
  upsertAuth: (args: {
    where: AuthWhereUniqueInput;
    create: AuthCreateInput;
    update: AuthUpdateInput;
  }) => AuthPromise;
  deleteAuth: (where: AuthWhereUniqueInput) => AuthPromise;
  deleteManyAuths: (where?: AuthWhereInput) => BatchPayloadPromise;
  createBank: (data: BankCreateInput) => BankPromise;
  updateBank: (args: {
    data: BankUpdateInput;
    where: BankWhereUniqueInput;
  }) => BankPromise;
  updateManyBanks: (args: {
    data: BankUpdateManyMutationInput;
    where?: BankWhereInput;
  }) => BatchPayloadPromise;
  upsertBank: (args: {
    where: BankWhereUniqueInput;
    create: BankCreateInput;
    update: BankUpdateInput;
  }) => BankPromise;
  deleteBank: (where: BankWhereUniqueInput) => BankPromise;
  deleteManyBanks: (where?: BankWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createOrganizationType: (
    data: OrganizationTypeCreateInput
  ) => OrganizationTypePromise;
  updateOrganizationType: (args: {
    data: OrganizationTypeUpdateInput;
    where: OrganizationTypeWhereUniqueInput;
  }) => OrganizationTypePromise;
  updateManyOrganizationTypes: (args: {
    data: OrganizationTypeUpdateManyMutationInput;
    where?: OrganizationTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganizationType: (args: {
    where: OrganizationTypeWhereUniqueInput;
    create: OrganizationTypeCreateInput;
    update: OrganizationTypeUpdateInput;
  }) => OrganizationTypePromise;
  deleteOrganizationType: (
    where: OrganizationTypeWhereUniqueInput
  ) => OrganizationTypePromise;
  deleteManyOrganizationTypes: (
    where?: OrganizationTypeWhereInput
  ) => BatchPayloadPromise;
  createOtp: (data: OtpCreateInput) => OtpPromise;
  updateOtp: (args: {
    data: OtpUpdateInput;
    where: OtpWhereUniqueInput;
  }) => OtpPromise;
  updateManyOtps: (args: {
    data: OtpUpdateManyMutationInput;
    where?: OtpWhereInput;
  }) => BatchPayloadPromise;
  upsertOtp: (args: {
    where: OtpWhereUniqueInput;
    create: OtpCreateInput;
    update: OtpUpdateInput;
  }) => OtpPromise;
  deleteOtp: (where: OtpWhereUniqueInput) => OtpPromise;
  deleteManyOtps: (where?: OtpWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserOrganizationRole: (
    data: UserOrganizationRoleCreateInput
  ) => UserOrganizationRolePromise;
  updateUserOrganizationRole: (args: {
    data: UserOrganizationRoleUpdateInput;
    where: UserOrganizationRoleWhereUniqueInput;
  }) => UserOrganizationRolePromise;
  upsertUserOrganizationRole: (args: {
    where: UserOrganizationRoleWhereUniqueInput;
    create: UserOrganizationRoleCreateInput;
    update: UserOrganizationRoleUpdateInput;
  }) => UserOrganizationRolePromise;
  deleteUserOrganizationRole: (
    where: UserOrganizationRoleWhereUniqueInput
  ) => UserOrganizationRolePromise;
  deleteManyUserOrganizationRoles: (
    where?: UserOrganizationRoleWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  auth: (
    where?: AuthSubscriptionWhereInput
  ) => AuthSubscriptionPayloadSubscription;
  bank: (
    where?: BankSubscriptionWhereInput
  ) => BankSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  organizationType: (
    where?: OrganizationTypeSubscriptionWhereInput
  ) => OrganizationTypeSubscriptionPayloadSubscription;
  otp: (
    where?: OtpSubscriptionWhereInput
  ) => OtpSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userOrganizationRole: (
    where?: UserOrganizationRoleSubscriptionWhereInput
  ) => UserOrganizationRoleSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BankOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "accountNumber_ASC"
  | "accountNumber_DESC"
  | "accountName_ASC"
  | "accountName_DESC"
  | "bankName_ASC"
  | "bankName_DESC"
  | "bankCode_ASC"
  | "bankCode_DESC";

export type AuthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "pin_ASC"
  | "pin_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type OrganizationOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC";

export type OrganizationTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type OtpOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "code_ASC"
  | "code_DESC"
  | "validated_ASC"
  | "validated_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "terms_ASC"
  | "terms_DESC";

export type UserOrganizationRoleOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AuthUpdateInput {
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  pin?: Maybe<String>;
  userId?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export type AuthWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}>;

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface OrganizationTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface OtpUpdateManyMutationInput {
  phoneNumber?: Maybe<String>;
  code?: Maybe<String>;
  validated?: Maybe<Boolean>;
}

export interface OtpSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OtpWhereInput>;
  AND?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
  OR?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
  NOT?: Maybe<OtpSubscriptionWhereInput[] | OtpSubscriptionWhereInput>;
}

export interface OtpUpdateInput {
  phoneNumber?: Maybe<String>;
  code?: Maybe<String>;
  validated?: Maybe<Boolean>;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OtpCreateInput {
  id?: Maybe<ID_Input>;
  phoneNumber: String;
  code: String;
  validated: Boolean;
}

export interface OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput;
  create: OrganizationCreateInput;
}

export interface OrganizationTypeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface OrganizationTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganizationTypeWhereInput[] | OrganizationTypeWhereInput>;
  OR?: Maybe<OrganizationTypeWhereInput[] | OrganizationTypeWhereInput>;
  NOT?: Maybe<OrganizationTypeWhereInput[] | OrganizationTypeWhereInput>;
}

export interface OrganizationTypeUpdateInput {
  name?: Maybe<String>;
}

export interface OrganizationUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  type?: Maybe<OrganizationTypeUpdateOneRequiredInput>;
  phoneNumber?: Maybe<String>;
  bank?: Maybe<BankUpdateOneRequiredInput>;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export type UserOrganizationRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AuthWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  pin?: Maybe<String>;
  pin_not?: Maybe<String>;
  pin_in?: Maybe<String[] | String>;
  pin_not_in?: Maybe<String[] | String>;
  pin_lt?: Maybe<String>;
  pin_lte?: Maybe<String>;
  pin_gt?: Maybe<String>;
  pin_gte?: Maybe<String>;
  pin_contains?: Maybe<String>;
  pin_not_contains?: Maybe<String>;
  pin_starts_with?: Maybe<String>;
  pin_not_starts_with?: Maybe<String>;
  pin_ends_with?: Maybe<String>;
  pin_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<AuthWhereInput[] | AuthWhereInput>;
  OR?: Maybe<AuthWhereInput[] | AuthWhereInput>;
  NOT?: Maybe<AuthWhereInput[] | AuthWhereInput>;
}

export interface BankUpsertNestedInput {
  update: BankUpdateDataInput;
  create: BankCreateInput;
}

export interface RoleUpdateOneRequiredInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface UserOrganizationRoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  role?: Maybe<RoleWhereInput>;
  organization?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    UserOrganizationRoleWhereInput[] | UserOrganizationRoleWhereInput
  >;
  OR?: Maybe<UserOrganizationRoleWhereInput[] | UserOrganizationRoleWhereInput>;
  NOT?: Maybe<
    UserOrganizationRoleWhereInput[] | UserOrganizationRoleWhereInput
  >;
}

export type OtpWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
}>;

export interface BankUpdateDataInput {
  accountNumber?: Maybe<String>;
  accountName?: Maybe<String>;
  bankName?: Maybe<String>;
  bankCode?: Maybe<String>;
}

export interface OtpWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  validated?: Maybe<Boolean>;
  validated_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OtpWhereInput[] | OtpWhereInput>;
  OR?: Maybe<OtpWhereInput[] | OtpWhereInput>;
  NOT?: Maybe<OtpWhereInput[] | OtpWhereInput>;
}

export interface BankUpdateOneRequiredInput {
  create?: Maybe<BankCreateInput>;
  update?: Maybe<BankUpdateDataInput>;
  upsert?: Maybe<BankUpsertNestedInput>;
  connect?: Maybe<BankWhereUniqueInput>;
}

export interface UserOrganizationRoleCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  role: RoleCreateOneInput;
  organization: OrganizationCreateOneInput;
}

export interface OrganizationTypeUpsertNestedInput {
  update: OrganizationTypeUpdateDataInput;
  create: OrganizationTypeCreateInput;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  dob?: Maybe<String>;
  terms?: Maybe<Boolean>;
}

export interface OrganizationTypeUpdateDataInput {
  name?: Maybe<String>;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface BankWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  accountNumber?: Maybe<String>;
  accountNumber_not?: Maybe<String>;
  accountNumber_in?: Maybe<String[] | String>;
  accountNumber_not_in?: Maybe<String[] | String>;
  accountNumber_lt?: Maybe<String>;
  accountNumber_lte?: Maybe<String>;
  accountNumber_gt?: Maybe<String>;
  accountNumber_gte?: Maybe<String>;
  accountNumber_contains?: Maybe<String>;
  accountNumber_not_contains?: Maybe<String>;
  accountNumber_starts_with?: Maybe<String>;
  accountNumber_not_starts_with?: Maybe<String>;
  accountNumber_ends_with?: Maybe<String>;
  accountNumber_not_ends_with?: Maybe<String>;
  accountName?: Maybe<String>;
  accountName_not?: Maybe<String>;
  accountName_in?: Maybe<String[] | String>;
  accountName_not_in?: Maybe<String[] | String>;
  accountName_lt?: Maybe<String>;
  accountName_lte?: Maybe<String>;
  accountName_gt?: Maybe<String>;
  accountName_gte?: Maybe<String>;
  accountName_contains?: Maybe<String>;
  accountName_not_contains?: Maybe<String>;
  accountName_starts_with?: Maybe<String>;
  accountName_not_starts_with?: Maybe<String>;
  accountName_ends_with?: Maybe<String>;
  accountName_not_ends_with?: Maybe<String>;
  bankName?: Maybe<String>;
  bankName_not?: Maybe<String>;
  bankName_in?: Maybe<String[] | String>;
  bankName_not_in?: Maybe<String[] | String>;
  bankName_lt?: Maybe<String>;
  bankName_lte?: Maybe<String>;
  bankName_gt?: Maybe<String>;
  bankName_gte?: Maybe<String>;
  bankName_contains?: Maybe<String>;
  bankName_not_contains?: Maybe<String>;
  bankName_starts_with?: Maybe<String>;
  bankName_not_starts_with?: Maybe<String>;
  bankName_ends_with?: Maybe<String>;
  bankName_not_ends_with?: Maybe<String>;
  bankCode?: Maybe<String>;
  bankCode_not?: Maybe<String>;
  bankCode_in?: Maybe<String[] | String>;
  bankCode_not_in?: Maybe<String[] | String>;
  bankCode_lt?: Maybe<String>;
  bankCode_lte?: Maybe<String>;
  bankCode_gt?: Maybe<String>;
  bankCode_gte?: Maybe<String>;
  bankCode_contains?: Maybe<String>;
  bankCode_not_contains?: Maybe<String>;
  bankCode_starts_with?: Maybe<String>;
  bankCode_not_starts_with?: Maybe<String>;
  bankCode_ends_with?: Maybe<String>;
  bankCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<BankWhereInput[] | BankWhereInput>;
  OR?: Maybe<BankWhereInput[] | BankWhereInput>;
  NOT?: Maybe<BankWhereInput[] | BankWhereInput>;
}

export interface OrganizationTypeCreateOneInput {
  create?: Maybe<OrganizationTypeCreateInput>;
  connect?: Maybe<OrganizationTypeWhereUniqueInput>;
}

export interface AuthCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phoneNumber: String;
  pin: String;
  userId: String;
  user: UserCreateOneInput;
}

export type BankWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BankSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BankWhereInput>;
  AND?: Maybe<BankSubscriptionWhereInput[] | BankSubscriptionWhereInput>;
  OR?: Maybe<BankSubscriptionWhereInput[] | BankSubscriptionWhereInput>;
  NOT?: Maybe<BankSubscriptionWhereInput[] | BankSubscriptionWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  phoneNumber: String;
  dob: String;
  terms?: Maybe<Boolean>;
}

export interface OrganizationWhereInput {
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  type?: Maybe<OrganizationTypeWhereInput>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  bank?: Maybe<BankWhereInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface OrganizationTypeUpdateOneRequiredInput {
  create?: Maybe<OrganizationTypeCreateInput>;
  update?: Maybe<OrganizationTypeUpdateDataInput>;
  upsert?: Maybe<OrganizationTypeUpsertNestedInput>;
  connect?: Maybe<OrganizationTypeWhereUniqueInput>;
}

export interface OrganizationUpdateOneRequiredInput {
  create?: Maybe<OrganizationCreateInput>;
  update?: Maybe<OrganizationUpdateDataInput>;
  upsert?: Maybe<OrganizationUpsertNestedInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RoleUpdateDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  dob?: Maybe<String>;
  terms?: Maybe<Boolean>;
}

export interface OrganizationCreateOneInput {
  create?: Maybe<OrganizationCreateInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  dob?: Maybe<String>;
  terms?: Maybe<Boolean>;
}

export interface AuthUpdateManyMutationInput {
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  pin?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface UserOrganizationRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserOrganizationRoleWhereInput>;
  AND?: Maybe<
    | UserOrganizationRoleSubscriptionWhereInput[]
    | UserOrganizationRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserOrganizationRoleSubscriptionWhereInput[]
    | UserOrganizationRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserOrganizationRoleSubscriptionWhereInput[]
    | UserOrganizationRoleSubscriptionWhereInput
  >;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  type?: Maybe<OrganizationTypeUpdateOneRequiredInput>;
  phoneNumber?: Maybe<String>;
  bank?: Maybe<BankUpdateOneRequiredInput>;
}

export interface AuthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthWhereInput>;
  AND?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
  OR?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
  NOT?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
}

export interface BankCreateOneInput {
  create?: Maybe<BankCreateInput>;
  connect?: Maybe<BankWhereUniqueInput>;
}

export type OrganizationTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  type: OrganizationTypeCreateOneInput;
  phoneNumber: String;
  bank: BankCreateOneInput;
}

export interface BankUpdateManyMutationInput {
  accountNumber?: Maybe<String>;
  accountName?: Maybe<String>;
  bankName?: Maybe<String>;
  bankCode?: Maybe<String>;
}

export interface BankUpdateInput {
  accountNumber?: Maybe<String>;
  accountName?: Maybe<String>;
  bankName?: Maybe<String>;
  bankCode?: Maybe<String>;
}

export interface BankCreateInput {
  id?: Maybe<ID_Input>;
  accountNumber: String;
  accountName: String;
  bankName: String;
  bankCode: String;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface UserOrganizationRoleUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  role?: Maybe<RoleUpdateOneRequiredInput>;
  organization?: Maybe<OrganizationUpdateOneRequiredInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  dob?: Maybe<String>;
  dob_not?: Maybe<String>;
  dob_in?: Maybe<String[] | String>;
  dob_not_in?: Maybe<String[] | String>;
  dob_lt?: Maybe<String>;
  dob_lte?: Maybe<String>;
  dob_gt?: Maybe<String>;
  dob_gte?: Maybe<String>;
  dob_contains?: Maybe<String>;
  dob_not_contains?: Maybe<String>;
  dob_starts_with?: Maybe<String>;
  dob_not_starts_with?: Maybe<String>;
  dob_ends_with?: Maybe<String>;
  dob_not_ends_with?: Maybe<String>;
  terms?: Maybe<Boolean>;
  terms_not?: Maybe<Boolean>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface OrganizationTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationTypeWhereInput>;
  AND?: Maybe<
    | OrganizationTypeSubscriptionWhereInput[]
    | OrganizationTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | OrganizationTypeSubscriptionWhereInput[]
    | OrganizationTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | OrganizationTypeSubscriptionWhereInput[]
    | OrganizationTypeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserOrganizationRolePreviousValues {
  id: ID_Output;
}

export interface UserOrganizationRolePreviousValuesPromise
  extends Promise<UserOrganizationRolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserOrganizationRolePreviousValuesSubscription
  extends Promise<AsyncIterator<UserOrganizationRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AuthConnection {
  pageInfo: PageInfo;
  edges: AuthEdge[];
}

export interface AuthConnectionPromise
  extends Promise<AuthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthEdge>>() => T;
  aggregate: <T = AggregateAuthPromise>() => T;
}

export interface AuthConnectionSubscription
  extends Promise<AsyncIterator<AuthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthSubscription>() => T;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuth {
  count: Int;
}

export interface AggregateAuthPromise
  extends Promise<AggregateAuth>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthSubscription
  extends Promise<AsyncIterator<AggregateAuth>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OrganizationType {
  id: ID_Output;
  name: String;
}

export interface OrganizationTypePromise
  extends Promise<OrganizationType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OrganizationTypeSubscription
  extends Promise<AsyncIterator<OrganizationType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationTypeNullablePromise
  extends Promise<OrganizationType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AggregateUserOrganizationRole {
  count: Int;
}

export interface AggregateUserOrganizationRolePromise
  extends Promise<AggregateUserOrganizationRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserOrganizationRoleSubscription
  extends Promise<AsyncIterator<AggregateUserOrganizationRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserOrganizationRoleConnection {
  pageInfo: PageInfo;
  edges: UserOrganizationRoleEdge[];
}

export interface UserOrganizationRoleConnectionPromise
  extends Promise<UserOrganizationRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserOrganizationRoleEdge>>() => T;
  aggregate: <T = AggregateUserOrganizationRolePromise>() => T;
}

export interface UserOrganizationRoleConnectionSubscription
  extends Promise<AsyncIterator<UserOrganizationRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserOrganizationRoleEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserOrganizationRoleSubscription>() => T;
}

export interface Organization {
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  id: ID_Output;
  name: String;
  email: String;
  phoneNumber: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  type: <T = OrganizationTypePromise>() => T;
  phoneNumber: () => Promise<String>;
  bank: <T = BankPromise>() => T;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  type: <T = OrganizationTypeSubscription>() => T;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  bank: <T = BankSubscription>() => T;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  type: <T = OrganizationTypePromise>() => T;
  phoneNumber: () => Promise<String>;
  bank: <T = BankPromise>() => T;
}

export interface UserOrganizationRole {
  id: ID_Output;
}

export interface UserOrganizationRolePromise
  extends Promise<UserOrganizationRole>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  organization: <T = OrganizationPromise>() => T;
}

export interface UserOrganizationRoleSubscription
  extends Promise<AsyncIterator<UserOrganizationRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  role: <T = RoleSubscription>() => T;
  organization: <T = OrganizationSubscription>() => T;
}

export interface UserOrganizationRoleNullablePromise
  extends Promise<UserOrganizationRole | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  role: <T = RolePromise>() => T;
  organization: <T = OrganizationPromise>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  phoneNumber: String;
  dob: String;
  terms?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  dob: () => Promise<String>;
  terms: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  terms: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthSubscriptionPayload {
  mutation: MutationType;
  node: Auth;
  updatedFields: String[];
  previousValues: AuthPreviousValues;
}

export interface AuthSubscriptionPayloadPromise
  extends Promise<AuthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthPreviousValuesPromise>() => T;
}

export interface AuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthPreviousValuesSubscription>() => T;
}

export interface UserOrganizationRoleSubscriptionPayload {
  mutation: MutationType;
  node: UserOrganizationRole;
  updatedFields: String[];
  previousValues: UserOrganizationRolePreviousValues;
}

export interface UserOrganizationRoleSubscriptionPayloadPromise
  extends Promise<UserOrganizationRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserOrganizationRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserOrganizationRolePreviousValuesPromise>() => T;
}

export interface UserOrganizationRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserOrganizationRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserOrganizationRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserOrganizationRolePreviousValuesSubscription>() => T;
}

export interface AuthPreviousValues {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  phoneNumber: String;
  pin: String;
  userId: String;
}

export interface AuthPreviousValuesPromise
  extends Promise<AuthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  pin: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface AuthPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBank {
  count: Int;
}

export interface AggregateBankPromise
  extends Promise<AggregateBank>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBankSubscription
  extends Promise<AsyncIterator<AggregateBank>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  phoneNumber: String;
  dob: String;
  terms?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  dob: () => Promise<String>;
  terms: () => Promise<Boolean>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<String>>;
  terms: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  dob: () => Promise<String>;
  terms: () => Promise<Boolean>;
}

export interface BankSubscriptionPayload {
  mutation: MutationType;
  node: Bank;
  updatedFields: String[];
  previousValues: BankPreviousValues;
}

export interface BankSubscriptionPayloadPromise
  extends Promise<BankSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BankPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BankPreviousValuesPromise>() => T;
}

export interface BankSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BankSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BankSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BankPreviousValuesSubscription>() => T;
}

export interface AggregateOtp {
  count: Int;
}

export interface AggregateOtpPromise
  extends Promise<AggregateOtp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOtpSubscription
  extends Promise<AsyncIterator<AggregateOtp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BankPreviousValues {
  id: ID_Output;
  accountNumber: String;
  accountName: String;
  bankName: String;
  bankCode: String;
}

export interface BankPreviousValuesPromise
  extends Promise<BankPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountNumber: () => Promise<String>;
  accountName: () => Promise<String>;
  bankName: () => Promise<String>;
  bankCode: () => Promise<String>;
}

export interface BankPreviousValuesSubscription
  extends Promise<AsyncIterator<BankPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountNumber: () => Promise<AsyncIterator<String>>;
  accountName: () => Promise<AsyncIterator<String>>;
  bankName: () => Promise<AsyncIterator<String>>;
  bankCode: () => Promise<AsyncIterator<String>>;
}

export interface OtpConnection {
  pageInfo: PageInfo;
  edges: OtpEdge[];
}

export interface OtpConnectionPromise
  extends Promise<OtpConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OtpEdge>>() => T;
  aggregate: <T = AggregateOtpPromise>() => T;
}

export interface OtpConnectionSubscription
  extends Promise<AsyncIterator<OtpConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OtpEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOtpSubscription>() => T;
}

export interface BankEdge {
  node: Bank;
  cursor: String;
}

export interface BankEdgePromise extends Promise<BankEdge>, Fragmentable {
  node: <T = BankPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BankEdgeSubscription
  extends Promise<AsyncIterator<BankEdge>>,
    Fragmentable {
  node: <T = BankSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Otp {
  id: ID_Output;
  phoneNumber: String;
  code: String;
  validated: Boolean;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface OtpPromise extends Promise<Otp>, Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  code: () => Promise<String>;
  validated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OtpSubscription
  extends Promise<AsyncIterator<Otp>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  validated: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OtpNullablePromise extends Promise<Otp | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  code: () => Promise<String>;
  validated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationTypeEdge {
  node: OrganizationType;
  cursor: String;
}

export interface OrganizationTypeEdgePromise
  extends Promise<OrganizationTypeEdge>,
    Fragmentable {
  node: <T = OrganizationTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationTypeEdgeSubscription
  extends Promise<AsyncIterator<OrganizationTypeEdge>>,
    Fragmentable {
  node: <T = OrganizationTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationPreviousValues {
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  id: ID_Output;
  name: String;
  email: String;
  phoneNumber: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phoneNumber: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BankConnection {
  pageInfo: PageInfo;
  edges: BankEdge[];
}

export interface BankConnectionPromise
  extends Promise<BankConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BankEdge>>() => T;
  aggregate: <T = AggregateBankPromise>() => T;
}

export interface BankConnectionSubscription
  extends Promise<AsyncIterator<BankConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BankEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBankSubscription>() => T;
}

export interface Auth {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  phoneNumber: String;
  pin: String;
  userId: String;
}

export interface AuthPromise extends Promise<Auth>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  pin: () => Promise<String>;
  userId: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface AuthSubscription
  extends Promise<AsyncIterator<Auth>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  pin: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AuthNullablePromise
  extends Promise<Auth | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  pin: () => Promise<String>;
  userId: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface OrganizationTypeSubscriptionPayload {
  mutation: MutationType;
  node: OrganizationType;
  updatedFields: String[];
  previousValues: OrganizationTypePreviousValues;
}

export interface OrganizationTypeSubscriptionPayloadPromise
  extends Promise<OrganizationTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationTypePreviousValuesPromise>() => T;
}

export interface OrganizationTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationTypePreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface OrganizationTypePreviousValues {
  id: ID_Output;
  name: String;
}

export interface OrganizationTypePreviousValuesPromise
  extends Promise<OrganizationTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OrganizationTypePreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OtpEdge {
  node: Otp;
  cursor: String;
}

export interface OtpEdgePromise extends Promise<OtpEdge>, Fragmentable {
  node: <T = OtpPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OtpEdgeSubscription
  extends Promise<AsyncIterator<OtpEdge>>,
    Fragmentable {
  node: <T = OtpSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OtpSubscriptionPayload {
  mutation: MutationType;
  node: Otp;
  updatedFields: String[];
  previousValues: OtpPreviousValues;
}

export interface OtpSubscriptionPayloadPromise
  extends Promise<OtpSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OtpPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OtpPreviousValuesPromise>() => T;
}

export interface OtpSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OtpSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OtpSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OtpPreviousValuesSubscription>() => T;
}

export interface AggregateOrganizationType {
  count: Int;
}

export interface AggregateOrganizationTypePromise
  extends Promise<AggregateOrganizationType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationTypeSubscription
  extends Promise<AsyncIterator<AggregateOrganizationType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserOrganizationRoleEdge {
  node: UserOrganizationRole;
  cursor: String;
}

export interface UserOrganizationRoleEdgePromise
  extends Promise<UserOrganizationRoleEdge>,
    Fragmentable {
  node: <T = UserOrganizationRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserOrganizationRoleEdgeSubscription
  extends Promise<AsyncIterator<UserOrganizationRoleEdge>>,
    Fragmentable {
  node: <T = UserOrganizationRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface Bank {
  id: ID_Output;
  accountNumber: String;
  accountName: String;
  bankName: String;
  bankCode: String;
}

export interface BankPromise extends Promise<Bank>, Fragmentable {
  id: () => Promise<ID_Output>;
  accountNumber: () => Promise<String>;
  accountName: () => Promise<String>;
  bankName: () => Promise<String>;
  bankCode: () => Promise<String>;
}

export interface BankSubscription
  extends Promise<AsyncIterator<Bank>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountNumber: () => Promise<AsyncIterator<String>>;
  accountName: () => Promise<AsyncIterator<String>>;
  bankName: () => Promise<AsyncIterator<String>>;
  bankCode: () => Promise<AsyncIterator<String>>;
}

export interface BankNullablePromise
  extends Promise<Bank | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountNumber: () => Promise<String>;
  accountName: () => Promise<String>;
  bankName: () => Promise<String>;
  bankCode: () => Promise<String>;
}

export interface OtpPreviousValues {
  id: ID_Output;
  phoneNumber: String;
  code: String;
  validated: Boolean;
  createdAt: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface OtpPreviousValuesPromise
  extends Promise<OtpPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  code: () => Promise<String>;
  validated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OtpPreviousValuesSubscription
  extends Promise<AsyncIterator<OtpPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  validated: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationTypeConnection {
  pageInfo: PageInfo;
  edges: OrganizationTypeEdge[];
}

export interface OrganizationTypeConnectionPromise
  extends Promise<OrganizationTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationTypeEdge>>() => T;
  aggregate: <T = AggregateOrganizationTypePromise>() => T;
}

export interface OrganizationTypeConnectionSubscription
  extends Promise<AsyncIterator<OrganizationTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationTypeSubscription>() => T;
}

export interface AuthEdge {
  node: Auth;
  cursor: String;
}

export interface AuthEdgePromise extends Promise<AuthEdge>, Fragmentable {
  node: <T = AuthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthEdgeSubscription
  extends Promise<AsyncIterator<AuthEdge>>,
    Fragmentable {
  node: <T = AuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Role {
  id: ID_Output;
  name: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "OrganizationType",
    embedded: false
  },
  {
    name: "Auth",
    embedded: false
  },
  {
    name: "Otp",
    embedded: false
  },
  {
    name: "UserOrganizationRole",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Bank",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
